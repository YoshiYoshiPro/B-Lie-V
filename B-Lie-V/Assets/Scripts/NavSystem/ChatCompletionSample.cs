#nullable enable
using System;
using Cysharp.Threading.Tasks;
using Mochineko.ChatGPT_API.Formats;
using UnityEngine;
using UnityEngine.Assertions;

namespace Mochineko.ChatGPT_API.Samples
{
    /// <summary>
    /// A sample component to complete chat by ChatGPT API on Unity.
    /// </summary>
    public sealed class ChatCompletionSample : MonoBehaviour
    {
        /// <summary>
        /// API key generated by OpenAPI.
        /// </summary>
        [SerializeField] private string apiKey = "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";

        /// <summary>
        /// System message to instruct assistant.
        /// </summary>
        [SerializeField, TextArea] private string systemMessage = "ビールが好き";

        /// <summary>
        /// Message sent to ChatGPT API.
        /// </summary>
        [SerializeField, TextArea] private string message = "What does kevin like?";

        [SerializeField] Voice voice;

        private ChatGPTConnection? connection;

        private void Start()
        {
            // API Key must be set.
            Assert.IsNotNull(apiKey);

            // Create instance of ChatGPTConnection with specifying chat model.
            connection = new ChatGPTConnection(apiKey, Model.Turbo);

            if (!string.IsNullOrEmpty(systemMessage))
            {
                // Add system message when you input.
                connection.AddSystemMessage(systemMessage);
            }
        }

        [ContextMenu(nameof(SendChat))]
        public async void SendChat(string InputData)
        {
            // Validations
            if (connection == null)
            {
                Debug.LogError($"[ChatGPT_API.Samples] Connection is null.");
                return;
            }

            if (string.IsNullOrEmpty(InputData))
            {
                Debug.LogError($"[ChatGPT_API.Samples] Chat content is empty.");
                return;
            }

            APIResponseBody result;
            try
            {
                // Create message by ChatGPT chat completion API.
                result = await connection
                    .CreateMessageAsync(InputData, this.GetCancellationTokenOnDestroy());
            }
            catch (Exception e)
            {
                // Exceptions should be caught.
                Debug.LogException(e);
                return;
            }

            // Log chat completion result.
            Debug.Log($"[ChatGPT_API.Samples] Result:\n{result.ResultMessage}");
            voice.VoiceStart(result.ResultMessage);
        }
    }
}